# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/113L1QzGyfkDEx2eGmbAKDf6FVRvgPTz6
"""


import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns
import random

sns.set_style("whitegrid")

st.set_page_config(page_title="WaterGuard Prototype", layout="wide")

st.title("ðŸ’§ WaterGuard Prototype: Water Usage Anomaly Detection")

# Cover image
st.image("https://images.unsplash.com/photo-1508672019048-805c876b67e2?auto=format&fit=crop&w=1350&q=80", use_column_width=True)

# Intro
st.markdown("""
### Welcome to WaterGuard! ðŸš°

This app monitors hourly water usage data from a house in Muharaq and uses AI to detect unusual spikes or leaks (anomalies) in water consumption.

**Features:**
- Simulated smart water meter data from a household in Muharaq
- Visualizes water usage hourly, daily, and monthly
- Detects leaks or abnormal consumption using AI anomaly detection

*Water conservation starts with awareness â€” letâ€™s guard your water usage together!*
""")

# Simulated data
def simulate_data():
    np.random.seed(42)
    hours = 365 * 24  # 1 year
    date_range = pd.date_range(start='2024-01-01', periods=hours, freq='H')
    usage_main = np.random.normal(12, 3, hours).clip(0, 50)
    usage_garden = np.random.normal(5, 2, hours).clip(0, 20)
    usage_kitchen = np.random.normal(3, 1, hours).clip(0, 10)
    usage_bathroom = np.random.normal(4, 1.5, hours).clip(0, 15)

    df = pd.DataFrame({
        'timestamp': date_range,
        'usage_main_liters': usage_main,
        'usage_garden_liters': usage_garden,
        'usage_kitchen_liters': usage_kitchen,
        'usage_bathroom_liters': usage_bathroom,
    })

    df['house_id'] = 'Muharaq_House_001'
    df['location'] = 'Muharaq'
    df['sensor_status'] = np.random.choice(['OK', 'MAINTENANCE', 'ERROR'], size=hours, p=[0.95, 0.04, 0.01])

    # Inject anomalies
    num_anomalies = int(0.05 * len(df))
    indices = random.sample(range(len(df)), num_anomalies)
    for i in indices:
        df.loc[i, ['usage_main_liters', 'usage_garden_liters', 'usage_kitchen_liters', 'usage_bathroom_liters']] *= np.random.uniform(2, 5)

    return df

# Use simulated data only
df = simulate_data()

# Preprocessing
df["timestamp"] = pd.to_datetime(df["timestamp"])
df["usage_liters"] = df[
    ["usage_main_liters", "usage_garden_liters", "usage_kitchen_liters", "usage_bathroom_liters"]
].sum(axis=1)

model = IsolationForest(contamination=0.05, random_state=42)
df["anomaly"] = model.fit_predict(df[["usage_liters"]])
df["anomaly"] = df["anomaly"].map({1: "Normal", -1: "Anomaly"})

st.write(f"ðŸ’¥ **Detected anomalies (possible leaks/spikes): {df['anomaly'].value_counts().get('Anomaly', 0)}**")

st.subheader("ðŸš¨ Anomaly Details")
st.dataframe(df[df["anomaly"] == "Anomaly"][["timestamp", "usage_liters"]])

# Plot hourly for selected day
df["date"] = df["timestamp"].dt.date
df["hour"] = df["timestamp"].dt.time

selected_day = st.selectbox("ðŸ“… Select a date to view hourly usage", sorted(df["date"].unique()))
df_hourly = df[df["date"] == selected_day]

fig1, ax1 = plt.subplots(figsize=(14, 6))
sns.lineplot(data=df_hourly, x="hour", y="usage_liters", ax=ax1, label="Usage")
sns.scatterplot(
    data=df_hourly[df_hourly["anomaly"] == "Anomaly"],
    x="hour",
    y="usage_liters",
    color="red",
    marker="X",
    s=60,
    label="Anomaly",
    ax=ax1
)
ax1.set_title(f"Hourly Water Usage for {selected_day}")
ax1.set_xlabel("Time (Hour)")
ax1.set_ylabel("Liters per Hour")
ax1.tick_params(axis="x", rotation=45)
ax1.legend()
st.pyplot(fig1)

# Daily usage
df_daily = df.set_index("timestamp").resample("D")["usage_liters"].sum().reset_index()
fig2, ax2 = plt.subplots(figsize=(14, 5))
sns.lineplot(data=df_daily, x="timestamp", y="usage_liters", ax=ax2)
ax2.set_title("Daily Water Usage (Liters per Day)")
ax2.set_xlabel("Date")
ax2.set_ylabel("Liters")
ax2.tick_params(axis="x", rotation=45)
st.pyplot(fig2)

# Monthly usage
df_monthly = df.set_index("timestamp").resample("M")["usage_liters"].sum().reset_index()
fig3, ax3 = plt.subplots(figsize=(14, 5))
sns.lineplot(data=df_monthly, x="timestamp", y="usage_liters", ax=ax3)
ax3.set_title("Monthly Water Usage (Liters per Month)")
ax3.set_xlabel("Month")
ax3.set_ylabel("Liters")
ax3.tick_params(axis="x", rotation=45)
st.pyplot(fig3)

